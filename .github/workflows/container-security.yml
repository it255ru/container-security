name: Dockerfile Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  dockerfile-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: json
        output-file: hadolint-results.json
      continue-on-error: true
      
    - name: Custom Dockerfile analysis
      id: analysis
      run: |
        echo "## üìã Dockerfile Analysis Results" > analysis-results.md
        echo "" >> analysis-results.md
        echo "**Scan date:** $(date)" >> analysis-results.md
        echo "**Commit:** ${{ github.sha }}" >> analysis-results.md
        echo "**Branch:** ${{ github.ref }}" >> analysis-results.md
        echo "" >> analysis-results.md
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
        echo "### üîç Found Issues:" >> analysis-results.md
        
        ISSUE_COUNT=0
        CRITICAL_COUNT=0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ADD –≤–º–µ—Å—Ç–æ COPY
        if grep -q "ADD" Dockerfile; then
          echo "‚ùå **WARNING**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ADD –≤–º–µ—Å—Ç–æ COPY. COPY –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤" >> analysis-results.md
          ((ISSUE_COUNT++))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        if grep -q "node:14" Dockerfile; then
          echo "‚ö†Ô∏è **WARNING**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è 'node:14'. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–µ—Ä—Å–∏–∏" >> analysis-results.md
          ((ISSUE_COUNT++))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ curl | bash
        if grep -q "curl.*|.*bash" Dockerfile; then
          echo "üö® **CRITICAL**: –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω 'curl | bash'. –≠—Ç–æ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!" >> analysis-results.md
          ((ISSUE_COUNT++))
          ((CRITICAL_COUNT++))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ 777
        if grep -q "777" Dockerfile; then
          echo "üö® **CRITICAL**: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ 777 - —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!" >> analysis-results.md
          ((ISSUE_COUNT++))
          ((CRITICAL_COUNT++))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ pinning –≤–µ—Ä—Å–∏–π –ø–∞–∫–µ—Ç–æ–≤
        if grep -q "npm install" Dockerfile && ! grep -q "package-lock.json\|pnpm-lock.yaml" Dockerfile; then
          echo "‚ö†Ô∏è **WARNING**: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ npm –ø–∞–∫–µ—Ç–æ–≤ –±–µ–∑ —Ñ–∏–∫—Å–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–π" >> analysis-results.md
          ((ISSUE_COUNT++))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ WORKDIR —Å –∞–±—Å–æ–ª—é—Ç–Ω—ã–º–∏ –ø—É—Ç—è–º–∏
        if ! grep -q "WORKDIR /app" Dockerfile; then
          echo "‚ö†Ô∏è **WARNING**: –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏ –≤ WORKDIR" >> analysis-results.md
          ((ISSUE_COUNT++))
        fi
        
        # –ê–Ω–∞–ª–∏–∑ Hadolint —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if [ -f hadolint-results.json ]; then
          echo "" >> analysis-results.md
          echo "### üê≥ Hadolint Results:" >> analysis-results.md
          jq -r '.[] | "‚Ä¢ **\(.level)**: Line \(.line): \(.message) (–∫–æ–¥: \(.code))"' hadolint-results.json >> analysis-results.md
          HADOLINT_COUNT=$(jq '. | length' hadolint-results.json)
          ISSUE_COUNT=$((ISSUE_COUNT + HADOLINT_COUNT))
        fi
        
        echo "" >> analysis-results.md
        echo "---" >> analysis-results.md
        echo "**Summary:** –ù–∞–π–¥–µ–Ω–æ $ISSUE_COUNT –ø—Ä–æ–±–ª–µ–º ($CRITICAL_COUNT –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö)" >> analysis-results.md
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –≤ output
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
    - name: Create or Update Issue
      uses: actions/github-script@v6
      if: steps.analysis.outputs.issue_count > 0
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('analysis-results.md', 'utf8');
          const issueCount = ${{ steps.analysis.outputs.issue_count }};
          const criticalCount = ${{ steps.analysis.outputs.critical_count }};
          
          const title = `üö® Dockerfile Security Issues: ${issueCount} problems found (${criticalCount} critical)`;
          
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['dockerfile-security']
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Dockerfile Security Issues')
          );
          
          const body = `${report}
          
          ---
          *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ workflow [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*
          `;
          
          if (existingIssue) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              title: title,
              body: body
            });
            console.log(`Updated existing issue #${existingIssue.number}`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π issue
            const { data: newIssue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dockerfile-security', 'security', 'ci-cd']
            });
            console.log(`Created new issue #${newIssue.number}`);
          }
          
    - name: Close existing issue if no problems
      uses: actions/github-script@v6
      if: steps.analysis.outputs.issue_count == 0
      with:
        script: |
          // –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–π issue –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Dockerfile
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['dockerfile-security']
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Dockerfile Security Issues')
          );
          
          if (existingIssue) {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º issue —Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ Dockerfile –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–º–∏—Ç–µ ${context.sha}`
            });
            
            console.log(`Closed issue #${existingIssue.number}`);
          }
          
    - name: Fail if critical issues found
      if: steps.analysis.outputs.critical_count > 0
      run: |
        echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ Dockerfile: ${{ steps.analysis.outputs.critical_count }}"
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –º–µ—Ä–¥–∂–µ–º"
        echo "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º Issue"
        exit 1
        
    - name: Post PR comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && steps.analysis.outputs.issue_count > 0
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('analysis-results.md', 'utf8');
          const issueCount = ${{ steps.analysis.outputs.issue_count }};
          const criticalCount = ${{ steps.analysis.outputs.critical_count }};
          
          const commentBody = `## üîç Dockerfile Security Scan
          
          ${report}
          
          *–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
