name: Docker Image Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  docker-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
      continue-on-error: true
      
    - name: Build Docker image
      run: |
        docker build -t my-app:${{ github.sha }} .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: my-app:${{ github.sha }}
        format: sarif
        output: trivy-results.sarif
        severity: HIGH,CRITICAL
      continue-on-error: true
      
    - name: Generate compact report
      id: report
      run: |
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Hadolint
        if [ -f hadolint-results.sarif ]; then
          HADOLINT_ISSUES=$(jq '.runs[0].results | length' hadolint-results.sarif)
        else
          HADOLINT_ISSUES=0
        fi
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Trivy
        if [ -f trivy-results.sarif ]; then
          TRIVY_VULNERABILITIES=$(jq '.runs[0].results | length' trivy-results.sarif)
        else
          TRIVY_VULNERABILITIES=0
        fi
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–ø–∞–∫—Ç–Ω—ã–π –æ—Ç—á–µ—Ç
        echo "## üîç Security Scan Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Hadolint Issues: $HADOLINT_ISSUES" >> $GITHUB_STEP_SUMMARY
        if [ $HADOLINT_ISSUES -gt 0 ]; then
          echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ Dockerfile:" >> $GITHUB_STEP_SUMMARY
          jq -r '.runs[0].results[] | "‚Ä¢ **\(.level)**: \(.message.text) (–ø—Ä–∞–≤–∏–ª–æ: \(.ruleId))"' hadolint-results.sarif >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ Dockerfile –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É Hadolint" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Trivy Vulnerabilities: $TRIVY_VULNERABILITIES" >> $GITHUB_STEP_SUMMARY
        if [ $TRIVY_VULNERABILITIES -gt 0 ]; then
          echo "‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ –æ–±—Ä–∞–∑–µ:" >> $GITHUB_STEP_SUMMARY
          jq -r '.runs[0].results[] | "‚Ä¢ **\(.level)**: \(.message.text) - \(.ruleId)"' trivy-results.sarif >> $GITHUB_STEP_SUMMARY
        else
          echo "‚úÖ –û–±—Ä–∞–∑ –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" >> $GITHUB_STEP_SUMMARY
        fi
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        echo "total_issues=$((HADOLINT_ISSUES + TRIVY_VULNERABILITIES))" >> $GITHUB_OUTPUT
        
    - name: Fail if issues found
      if: steps.report.outputs.total_issues > 0
      run: |
        echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã: ${{ steps.report.outputs.total_issues }}"
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –º–µ—Ä–¥–∂–µ–º"
        exit 1
