name: Container Security Audit

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  security_audit:
    name: Container Security CI/CD Checklist
    runs-on: ubuntu-latest

    permissions:
      contents: read
      security-events: write

    steps:
      # --- 0. Checkout ---
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- 1. Setup Docker ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: docker build -t myapp:ci .

      # --- 1. Проверка Dockerfile (lint) ---
      - name: Dockerfile Lint (Hadolint)
        run: |
          # Создаём файл для вывода
          hadolint Dockerfile -f json > hadolint.json || true
      
      # --- 1a. Авто-обновление checklist с любыми предупреждениями ---
      - name: Update checklist with Hadolint warnings
        run: |
          # Создаём checklist, если не существует
          if [ ! -f checklist.csv ]; then
            echo "Checklist" > checklist.csv
          fi
      
          # Проверяем, есть ли предупреждения
          if [ -s hadolint.json ]; then
            echo "Processing Hadolint warnings into checklist.csv..."
            # Для каждого предупреждения добавляем строку
            jq -r '.[] | "☐ \(.code) \(.line): \(.message)"' hadolint.json | while read -r line; do
              # Добавляем только если ещё нет в checklist
              if ! grep -Fq "$line" checklist.csv; then
                echo "$line" >> checklist.csv
              fi
            done
          else
            echo "No Hadolint warnings found."
          fi
          
      - name: Update checklist with Trivy vulnerabilities
        run: |
          # Конвертируем SARIF в читаемый текст
          jq -r '.runs[].results[] | "☐ \(.ruleId) \(.level): \(.message.text)"' trivy-results.sarif | while read -r line; do
            if ! grep -Fq "$line" checklist.csv; then
              echo "$line" >> checklist.csv
            fi
          done

      # --- 3. Сканирование уязвимостей ---
      - name: Vulnerability Scan (Trivy)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: myapp:ci
          format: sarif
          output: trivy-results.sarif
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH
          exit-code: 1

      - name: Upload Trivy results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      # --- 4. Анализ зависимостей (SCA) ---
      - name: Software Composition Analysis
        uses: pypa/gh-action-pip-audit@v1.1.0
        with:
          requirements: requirements.txt
          format: json
        continue-on-error: true

      # --- 5. Генерация SBOM (Syft) ---
      - name: Generate SBOM (Syft)
        uses: anchore/sbom-action@v0
        with:
          image: myapp:ci
          output-file: sbom.json

      # --- 6. Проверка чеклиста (checklist.csv) ---
      - name: Validate checklist status
        run: |
          echo "Checking checklist..."
          if grep -q "☐" checklist.csv; then
            echo "❌ There are unchecked security tasks:"
            grep "☐" checklist.csv
            exit 1
          else
            echo "✅ All checklist items completed."
          fi

      # --- 7. Финальный отчёт ---
      - name: Summary
        run: |
          echo "✅ Container Security Audit completed successfully."
