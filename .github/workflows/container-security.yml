name: Dockerfile Security Scan with SBOM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write
  packages: write  # Добавлено для сохранения артефактов в package

jobs:
  dockerfile-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    # ========== LINTING STAGE ==========
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: json
        output-file: hadolint-results.json
      continue-on-error: true
      
    - name: Check for .dockerignore
      id: dockerignore_check
      run: |
        if [ -f ".dockerignore" ]; then
          echo "dockerignore_exists=true" >> $GITHUB_OUTPUT
        else
          echo "dockerignore_exists=false" >> $GITHUB_OUTPUT
        fi

    # ========== BUILD STAGE ==========
    - name: Try to build Docker image
      id: build
      continue-on-error: true
      run: |
        echo "Attempting to build Docker image..."
        
        # Создаем необходимые файлы если их нет
        mkdir -p html
        if [ ! -f "html/index.html" ]; then
          echo '<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Test Page</h1></body></html>' > html/index.html
        fi
        
        # Пытаемся собрать образ с тегом
        set +e
        docker build -t test-image:latest -t test-image:${{ github.sha }} . > build-output.log 2> build-errors.log
        BUILD_EXIT_CODE=$?
        set -e
        
        echo "=== BUILD OUTPUT ==="  
        cat build-output.log
        echo "=== BUILD ERRORS ==="
        cat build-errors.log
        
        # Всегда создаем JSON с результатами сборки
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "Docker build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo '{"success": true, "message": "Build completed successfully"}' > build-results.json
        else
          echo "Docker build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          ERROR_MSG=$(head -c 1000 build-errors.log | sed 's/"/\\"/g' || echo "Build failed")
          echo "{\"success\": false, \"error\": \"$ERROR_MSG\"}" > build-results.json
        fi

    # ========== SBOM & SECURITY SCAN STAGE ==========
    - name: Install SBOM and security tools
      if: steps.build.outputs.build_success == 'true'
      run: |
        # Устанавливаем Syft для генерации SBOM
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Устанавливаем Trivy для сканирования уязвимостей
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        
        # Устанавливаем Grype для сканирования SBOM
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Устанавливаем jq для обработки JSON
        sudo apt-get update && sudo apt-get install -y jq
        
    - name: Generate SBOM for final image
      id: sbom_generation
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "Generating SBOM for final image..."
        
        # Генерируем SBOM с помощью Syft
        syft test-image:latest -o cyclonedx-json > sbom.cyclonedx.json
        
        # Добавляем информацию о скомпилированном Nginx в SBOM
        NGINX_HASH=$(docker run --rm test-image:latest sha256sum /usr/sbin/nginx 2>/dev/null | cut -d' ' -f1 || echo "unknown")
        
        # Исправленная команда jq - более безопасная обработка
        jq '.components += [{
          "type": "application",
          "name": "nginx",
          "version": "1.24.0",
          "purl": "pkg:generic/nginx@1.24.0?download_url=https://nginx.org/download/nginx-1.24.0.tar.gz",
          "hashes": [{"alg": "SHA-256", "content": "'$NGINX_HASH'"}],
          "properties": [
            {"name": "builtFromSource", "value": "true"},
            {"name": "configureOptions", "value": "--with-http_ssl_module"},
            {"name": "hardened", "value": "true"}
          ]
        }]' sbom.cyclonedx.json > sbom-enhanced.json
        
        mv sbom-enhanced.json sbom.cyclonedx.json
        
        # Анализ SBOM
        COMPONENT_COUNT=$(jq '.components | length' sbom.cyclonedx.json)
        ALPINE_COMPONENTS=$(jq '[.components[] | select(.purl != null) | select(.purl | type == "string") | select(.purl | startswith("pkg:apk/alpine"))] | length' sbom.cyclonedx.json)
        
        echo "component_count=$COMPONENT_COUNT" >> $GITHUB_OUTPUT
        echo "alpine_components=$ALPINE_COMPONENTS" >> $GITHUB_OUTPUT
        
        echo "SBOM generated with $COMPONENT_COUNT components ($ALPINE_COMPONENTS Alpine packages)"
      
    - name: Scan SBOM for vulnerabilities with Grype
      id: sbom_scan
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "Scanning SBOM for vulnerabilities with Grype..."
        
        # Используем Grype для сканирования SBOM
        grype sbom:sbom.cyclonedx.json --output json --fail-on high > sbom-scan-results.json 2>/dev/null || true
        
        # Анализируем результаты сканирования SBOM
        if [ -f sbom-scan-results.json ] && jq -e . sbom-scan-results.json > /dev/null 2>&1; then
          SBOM_VULN_COUNT=$(jq '.matches // [] | length' sbom-scan-results.json 2>/dev/null || echo "0")
          echo "sbom_vuln_count=$SBOM_VULN_COUNT" >> $GITHUB_OUTPUT
          echo "SBOM scan found $SBOM_VULN_COUNT vulnerabilities"
          
          # Сохраняем краткий отчет
          if [ "$SBOM_VULN_COUNT" -gt 0 ]; then
            grype sbom:sbom.cyclonedx.json --output table > sbom-vulnerabilities.txt
          fi
        else
          echo "sbom_vuln_count=0" >> $GITHUB_OUTPUT
          echo "SBOM scan completed - no vulnerabilities found or error in scan"
        fi
      
    - name: Run Trivy vulnerability scan on image
      id: trivy_scan
      if: steps.build.outputs.build_success == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: test-image:latest
        format: json
        output: trivy-results.json
        severity: HIGH,CRITICAL
        exit-code: 0
      continue-on-error: true

    # ========== ANALYSIS & REPORTING STAGE ==========
    - name: Custom Dockerfile analysis
      id: analysis
      env:
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        DOCKERIGNORE_EXISTS: ${{ steps.dockerignore_check.outputs.dockerignore_exists }}
        SBOM_COMPONENT_COUNT: ${{ steps.sbom_generation.outputs.component_count }}
        SBOM_ALPINE_COMPONENTS: ${{ steps.sbom_generation.outputs.alpine_components }}
        SBOM_VULN_COUNT: ${{ steps.sbom_scan.outputs.sbom_vuln_count }}
      run: |
        set +e
        
        echo "## Dockerfile Analysis Results" > analysis-results.md
        echo "" >> analysis-results.md
        echo "**Scan date:** $(date)" >> analysis-results.md
        echo "**Commit:** ${{ github.sha }}" >> analysis-results.md
        echo "**Branch:** ${{ github.ref }}" >> analysis-results.md
        echo "" >> analysis-results.md
        
        # Инициализация счетчиков
        ISSUE_COUNT=0
        CRITICAL_COUNT=0
        
        echo "### Found Issues:" >> analysis-results.md
        
        # УНИВЕРСАЛЬНАЯ ПРОВЕРКА NON-ROOT ПОЛЬЗОВАТЕЛЯ
        LAST_USER=$(grep "^USER " Dockerfile | tail -1 2>/dev/null || echo "")
        USER_CREATED=$(grep -E "adduser|useradd|addgroup|groupadd" Dockerfile 2>/dev/null | head -1 || echo "")

        if [[ -n "$LAST_USER" && "$LAST_USER" != "USER root" && "$LAST_USER" != "USER 0" ]]; then
          echo "[v] Non-root пользователь: $LAST_USER" >> analysis-results.md
        elif [ -n "$USER_CREATED" ]; then
          echo "[v] Создан non-root пользователь: $USER_CREATED" >> analysis-results.md
        else
          echo "[!] **WARNING**: Не обнаружен non-root пользователь" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # Другие проверки...
        if grep "ADD" Dockerfile > /dev/null 2>&1; then
          echo "[!] **WARNING**: Используется ADD вместо COPY. COPY предпочтительнее для файлов" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # Проверка на базовые образы без версий
        if grep -E "FROM.*:(latest| )" Dockerfile > /dev/null 2>&1 || 
           grep -E "^FROM [^:]+$" Dockerfile > /dev/null 2>&1; then
          echo "[!] **WARNING**: Базовый образ без конкретной версии. Всегда указывайте версию тега" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # Проверка на curl | bash
        if grep -E "curl.*\|.*bash" Dockerfile > /dev/null 2>&1 || 
           grep -E "wget.*\|.*bash" Dockerfile > /dev/null 2>&1; then
          echo "[!!] **CRITICAL**: Обнаружен опасный паттерн 'curl/wget | bash'. Это угроза безопасности!" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        fi
        
        # Проверка прав 777
        if grep -E "chmod.*777" Dockerfile > /dev/null 2>&1 || 
           grep -E "777" Dockerfile > /dev/null 2>&1; then
          echo "[!!] **CRITICAL**: Используются права 777 - это серьезная уязвимость безопасности!" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        fi
        
        # Проверка на установку пакетов без очистки кеша
        if grep -E "(apt-get|apk|yum|dnf) install" Dockerfile > /dev/null 2>&1 && 
           ! grep -E "(apt-get clean|rm -rf /var/cache/|apk cache clean|yum clean|dnf clean)" Dockerfile > /dev/null 2>&1; then
          echo "[!] **WARNING**: Установка пакетов без очистки кеша. Увеличивает размер образа" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # Проверка на множественные RUN инструкции
        RUN_COUNT=$(grep -c "^RUN " Dockerfile 2>/dev/null || echo "0")
        if [ "$RUN_COUNT" -gt 5 ]; then
          echo "[!] **WARNING**: Много RUN инструкций ($RUN_COUNT). Консолидируйте их для уменьшения слоев" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # Проверка на отсутствие .dockerignore
        if [ "$DOCKERIGNORE_EXISTS" = "false" ]; then
          echo "[!] **WARNING**: Отсутствует .dockerignore файл. Рекомендуется добавить для уменьшения размера контекста" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # ========== НОВЫЙ РАЗДЕЛ: SBOM ANALYSIS ==========
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "" >> analysis-results.md
          echo "### SBOM Analysis:" >> analysis-results.md
          echo "[v] **Software Bill of Materials generated**" >> analysis-results.md
          echo "- **Total components:** $SBOM_COMPONENT_COUNT" >> analysis-results.md
          echo "- **Alpine packages:** $SBOM_ALPINE_COMPONENTS" >> analysis-results.md
          echo "- **Nginx:** 1.24.0 (compiled from source)" >> analysis-results.md
          
          if [ "$SBOM_VULN_COUNT" -gt 0 ]; then
            echo "[!] **SBOM Vulnerabilities:** $SBOM_VULN_COUNT high/critical issues found" >> analysis-results.md
            ISSUE_COUNT=$((ISSUE_COUNT + SBOM_VULN_COUNT))
          else
            echo "[v] **SBOM Vulnerabilities:** No high/critical issues found" >> analysis-results.md
          fi
        fi
        
        # ВАЖНО: Проверка результатов сборки - всегда добавляем в отчет
        if [ "$BUILD_SUCCESS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### Docker Build Results:" >> analysis-results.md
          echo "[!!] **CRITICAL**: Docker image failed to build!" >> analysis-results.md
          if [ -f build-results.json ]; then
            if jq -e . build-results.json > /dev/null 2>&1; then
              BUILD_ERROR=$(jq -r '.error // "Build failed but error details are not available"' build-results.json 2>/dev/null)
              echo "Build errors:" >> analysis-results.md
              echo '```' >> analysis-results.md
              echo "$BUILD_ERROR" >> analysis-results.md
              echo '```' >> analysis-results.md
            else
              echo "• Invalid build results JSON format" >> analysis-results.md
              if [ -f build-errors.log ]; then
                echo "Raw build errors:" >> analysis-results.md
                echo '```' >> analysis-results.md
                head -100 build-errors.log >> analysis-results.md
                echo '```' >> analysis-results.md
              fi
            fi
          fi
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        else
          echo "" >> analysis-results.md
          echo "### Docker Build Results:" >> analysis-results.md
          echo "[v] Docker image built successfully" >> analysis-results.md
        fi
        
        # Анализ Hadolint результатов
        HADOLINT_COUNT=0
        if [ -f hadolint-results.json ]; then
          echo "" >> analysis-results.md
          echo "### Hadolint Results:" >> analysis-results.md
          
          if jq -e . hadolint-results.json > /dev/null 2>&1; then
            HADOLINT_COUNT=$(jq '. | length' hadolint-results.json 2>/dev/null || echo "0")
            if [ "$HADOLINT_COUNT" -gt 0 ]; then
              jq -r '.[] | "• **\(.level)**: \(.message) (код: \(.code))"' hadolint-results.json 2>/dev/null >> analysis-results.md
            else
              echo "[v] No Hadolint issues found" >> analysis-results.md
            fi
          else
            echo "• Invalid Hadolint JSON format" >> analysis-results.md
          fi
        fi
        
        # Анализ Trivy результатов
        TRIVY_COUNT=0
        if [ -f trivy-results.json ] && [ "$BUILD_SUCCESS" = "true" ]; then
          echo "" >> analysis-results.md
          echo "### Trivy Vulnerability Scan:" >> analysis-results.md
          
          if jq -e . trivy-results.json > /dev/null 2>&1; then
            TRIVY_COUNT=$(jq '.Results[0].Vulnerabilities // [] | length' trivy-results.json 2>/dev/null || echo "0")
            if [ "$TRIVY_COUNT" -gt 0 ]; then
              echo "[!] **SECURITY**: Found $TRIVY_COUNT vulnerabilities" >> analysis-results.md
              jq -r '.Results[0].Vulnerabilities[0:3][] | "• \(.VulnerabilityID): \(.Title) (\(.Severity))"' trivy-results.json 2>/dev/null >> analysis-results.md
            else
              echo "[v] No vulnerabilities found by Trivy" >> analysis-results.md
            fi
          else
            echo "• Invalid Trivy JSON format" >> analysis-results.md
          fi
        elif [ "$BUILD_SUCCESS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### Trivy Vulnerability Scan:" >> analysis-results.md
          echo "**SKIPPED**: Trivy scan skipped - Docker build failed" >> analysis-results.md
        fi
        
        # Суммируем все проблемы (включая SBOM уязвимости)
        ISSUE_COUNT=$((ISSUE_COUNT + HADOLINT_COUNT + TRIVY_COUNT))
        
        echo "" >> analysis-results.md
        echo "---" >> analysis-results.md
        echo "**Summary:** Found $ISSUE_COUNT issues ($CRITICAL_COUNT critical)" >> analysis-results.md
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "**SBOM Components:** $SBOM_COMPONENT_COUNT total, $SBOM_ALPINE_COMPONENTS Alpine packages" >> analysis-results.md
        fi
        
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        exit 0

    # ========== ARTIFACT PUBLISHING STAGE ==========
    - name: Save Docker image as artifact
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "Saving Docker image as artifact..."
        docker save test-image:latest -o test-image.tar
        gzip test-image.tar

    - name: Upload Docker image artifact
      if: steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: docker-image-${{ github.sha }}
        path: test-image.tar.gz
        retention-days: 30
        
    - name: Upload SBOM artifact
      if: steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-cyclonedx-${{ github.sha }}
        path: |
          sbom.cyclonedx.json
          sbom-scan-results.json
          sbom-vulnerabilities.txt
        retention-days: 90
        
    - name: Upload scan reports artifact
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.sha }}
        path: |
          analysis-results.md
          hadolint-results.json
          trivy-results.json
          build-results.json
        retention-days: 90

    # ========== NOTIFICATION STAGE ==========
    - name: Create or Update Issue
      uses: actions/github-script@v6
      if: steps.analysis.outputs.issue_count > 0 || steps.build.outputs.build_success == 'false'
      env:
        ISSUE_COUNT: ${{ steps.analysis.outputs.issue_count }}
        CRITICAL_COUNT: ${{ steps.analysis.outputs.critical_count }}
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        SBOM_COMPONENT_COUNT: ${{ steps.sbom_generation.outputs.component_count }}
        SBOM_ALPINE_COMPONENTS: ${{ steps.sbom_generation.outputs.alpine_components }}
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('analysis-results.md', 'utf8');
          const issueCount = process.env.ISSUE_COUNT || 0;
          const criticalCount = process.env.CRITICAL_COUNT || 0;
          const buildSuccess = process.env.BUILD_SUCCESS;
          const sbomComponentCount = process.env.SBOM_COMPONENT_COUNT || 0;
          const sbomAlpineComponents = process.env.SBOM_ALPINE_COMPONENTS || 0;
          
          let title;
          if (buildSuccess === 'false') {
            title = `Docker Build Failed: ${issueCount} additional problems found`;
          } else {
            title = `Dockerfile Security Issues: ${issueCount} problems found (${criticalCount} critical)`;
          }
          
          // Функция для безопасного чтения и обрезки JSON
          const safeReadJson = (filename, maxLength = 5000) => {
            try {
              if (fs.existsSync(filename)) {
                const content = fs.readFileSync(filename, 'utf8');
                // Обрезаем длинные JSON файлы
                if (content.length > maxLength) {
                  return content.substring(0, maxLength) + `\n\n... [FILE TRUNCATED - ${content.length - maxLength} more characters] ...\n\nDownload full file from artifacts.`;
                }
                return content;
              }
            } catch (e) {
              return `Error reading ${filename}: ${e.message}`;
            }
            return `File ${filename} not found`;
          };
          
          // Функция для анализа SBOM уязвимостей
          const analyzeSbomVulnerabilities = () => {
            try {
              if (fs.existsSync('sbom-scan-results.json')) {
                const sbomScan = JSON.parse(fs.readFileSync('sbom-scan-results.json', 'utf8'));
                const matches = sbomScan.matches || [];
                
                if (matches.length === 0) {
                  return "No vulnerabilities found in SBOM";
                }
                
                // Группируем по severity
                const bySeverity = {};
                matches.forEach(match => {
                  const severity = match.vulnerability?.severity || 'unknown';
                  bySeverity[severity] = (bySeverity[severity] || 0) + 1;
                });
                
                let summary = `Found ${matches.length} vulnerabilities:\n`;
                Object.entries(bySeverity).forEach(([severity, count]) => {
                  summary += `- ${severity.toUpperCase()}: ${count}\n`;
                });
                
                // Показываем только топ-5 уязвимостей
                const topVulns = matches.slice(0, 5).map(match => {
                  const vuln = match.vulnerability || {};
                  return `• ${vuln.id || 'Unknown'}: ${vuln.description ? vuln.description.substring(0, 100) + '...' : 'No description'} (${vuln.severity || 'unknown'})`;
                }).join('\n');
                
                if (matches.length > 5) {
                  summary += `\nTop 5 vulnerabilities:\n${topVulns}\n... and ${matches.length - 5} more`;
                } else {
                  summary += `\nVulnerabilities:\n${topVulns}`;
                }
                
                return summary;
              }
            } catch (e) {
              return `Error analyzing SBOM vulnerabilities: ${e.message}`;
            }
            return "No SBOM vulnerability data available";
          };
          
          // Функция для анализа Trivy результатов
          const analyzeTrivyResults = () => {
            try {
              if (fs.existsSync('trivy-results.json')) {
                const trivy = JSON.parse(fs.readFileSync('trivy-results.json', 'utf8'));
                const vulnerabilities = trivy.Results?.[0]?.Vulnerabilities || [];
                
                if (vulnerabilities.length === 0) {
                  return "No vulnerabilities found by Trivy";
                }
                
                // Группируем по severity
                const bySeverity = {};
                vulnerabilities.forEach(vuln => {
                  const severity = vuln.Severity || 'unknown';
                  bySeverity[severity] = (bySeverity[severity] || 0) + 1;
                });
                
                let summary = `Found ${vulnerabilities.length} vulnerabilities:\n`;
                Object.entries(bySeverity).forEach(([severity, count]) => {
                  summary += `- ${severity}: ${count}\n`;
                });
                
                // Показываем только топ-3 уязвимостей
                const topVulns = vulnerabilities.slice(0, 3).map(vuln => {
                  return `• ${vuln.VulnerabilityID}: ${vuln.Title ? vuln.Title.substring(0, 80) + '...' : 'No title'} (${vuln.Severity || 'unknown'})`;
                }).join('\n');
                
                if (vulnerabilities.length > 3) {
                  summary += `\nTop 3 vulnerabilities:\n${topVulns}\n... and ${vulnerabilities.length - 3} more`;
                } else {
                  summary += `\nVulnerabilities:\n${topVulns}`;
                }
                
                return summary;
              }
            } catch (e) {
              return `Error analyzing Trivy results: ${e.message}`;
            }
            return "No Trivy results available";
          };
          
          // Создаем компактный отчет
          const sbomVulnAnalysis = analyzeSbomVulnerabilities();
          const trivyAnalysis = analyzeTrivyResults();
          
          const detailedReport = `${report}
                
          ## Vulnerability Analysis
          
          ### SBOM Vulnerabilities:
          ${sbomVulnAnalysis}
          
          ### Trivy Image Scan:
          ${trivyAnalysis}
          
          ## Artifacts
          
          Полные результаты доступны в артефактах workflow:
          
          - **Docker Image**: \`docker-image-${{ github.sha }}\`
          - **SBOM Files**: \`sbom-cyclonedx-${{ github.sha }}\` 
          - **Security Reports**: \`security-reports-${{ github.sha }}\`
          
          [📎 View all artifacts](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          
          ## Quick Links
          
          - [View Workflow Run](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})
          - [View Source Code](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/tree/${context.sha})
          
          ---
          
          *Automatically generated by [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*
          `;
                
                // Ищем существующий issue
                const { data: issues } = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'open',
                  labels: ['dockerfile-security']
                });
                
                const existingIssue = issues.find(issue => 
                  issue.title.includes('Dockerfile Security Issues') || issue.title.includes('Docker Build Failed')
                );
                
                if (existingIssue) {
                  // Обновляем существующий issue
                  await github.rest.issues.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: existingIssue.number,
                    title: title,
                    body: detailedReport
                  });
                  console.log(`Updated existing issue #${existingIssue.number}`);
                } else {
                  // Создаем новый issue
                  const { data: newIssue } = await github.rest.issues.create({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    title: title,
                    body: detailedReport,
                    labels: ['dockerfile-security', 'security', 'ci-cd']
                  });
                  console.log(`Created new issue #${newIssue.number}`);
                }
          
    - name: Close existing issue if no problems
      uses: actions/github-script@v6
      if: steps.analysis.outputs.issue_count == 0 && steps.build.outputs.build_success == 'true'
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['dockerfile-security']
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Dockerfile Security Issues') || issue.title.includes('Docker Build Failed')
          );
          
          if (existingIssue) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `All Dockerfile issues fixed in commit ${context.sha}\nSBOM analysis shows clean results`
            });
            
            console.log(`Closed issue #${existingIssue.number}`);
          }
          
    - name: Fail if critical issues found
      if: steps.analysis.outputs.critical_count > 0
      run: |
        echo "Found critical issues in Dockerfile: ${{ steps.analysis.outputs.critical_count }}"
        echo "Please fix them before merging"
        echo "Details in the created Issue"
        exit 1
        
    - name: Post PR comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && (steps.analysis.outputs.issue_count > 0 || steps.build.outputs.build_success == 'false')
      env:
        ISSUE_COUNT: ${{ steps.analysis.outputs.issue_count }}
        CRITICAL_COUNT: ${{ steps.analysis.outputs.critical_count }}
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        SBOM_COMPONENT_COUNT: ${{ steps.sbom_generation.outputs.component_count }}
        SBOM_ALPINE_COMPONENTS: ${{ steps.sbom_generation.outputs.alpine_components }}
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('analysis-results.md', 'utf8');
          const issueCount = process.env.ISSUE_COUNT;
          const criticalCount = process.env.CRITICAL_COUNT;
          const buildSuccess = process.env.BUILD_SUCCESS;
          const sbomComponentCount = process.env.SBOM_COMPONENT_COUNT;
          const sbomAlpineComponents = process.env.SBOM_ALPINE_COMPONENTS;
          
          let commentTitle;
          if (buildSuccess === 'false') {
            commentTitle = '## Dockerfile Security Scan - BUILD FAILED';
          } else {
            commentTitle = '## Dockerfile Security Scan';
          }
          
          const sbomInfo = buildSuccess === 'true' ? `
          **SBOM Analysis:**
          - Components: ${sbomComponentCount} total
          - Alpine packages: ${sbomAlpineComponents}
          - Nginx: 1.24.0 (compiled from source)
          ` : '';
          
          const commentBody = `${commentTitle}
          
          ${report}
          
          ${sbomInfo}
          
          *Automated security scan*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
