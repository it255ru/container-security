name: Dockerfile Security Scan

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  dockerfile-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: json
        output-file: hadolint-results.json
      continue-on-error: true
      
    - name: Try to build Docker image
      id: build
      continue-on-error: true
      run: |
        echo "üîÑ Attempting to build Docker image..."
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π HTML —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        mkdir -p html
        echo '<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Test Page</h1></body></html>' > html/index.html
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑
        set +e
        docker build -t test-image . > build-output.log 2> build-errors.log
        BUILD_EXIT_CODE=$?
        set -e
        
        # –û—á–∏—â–∞–µ–º –ª–æ–≥–∏ –¥–ª—è JSON
        BUILD_OUTPUT=$(cat build-output.log | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr -d '\000-\011\013\014\016-\037')
        BUILD_ERRORS=$(cat build-errors.log | sed 's/\\/\\\\/g' | sed 's/"/\\"/g' | tr -d '\000-\011\013\014\016-\037')
        
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Docker build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo "{\"success\": true, \"output\": \"$BUILD_OUTPUT\"}" > build-results.json
        else
          echo "‚ùå Docker build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          echo "{\"success\": false, \"error\": \"$BUILD_ERRORS\", \"output\": \"$BUILD_OUTPUT\"}" > build-results.json
        fi
      
    - name: Check for .dockerignore
      id: dockerignore_check
      run: |
        if [ -f ".dockerignore" ]; then
          echo "‚úÖ .dockerignore file found"
          echo "dockerignore_exists=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è No .dockerignore file found"
          echo "dockerignore_exists=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Run Trivy vulnerability scan
      id: trivy_scan
      if: steps.build.outputs.build_success == 'true' && steps.dockerignore_check.outputs.dockerignore_exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: test-image
        format: json
        output: trivy-results.json
        severity: HIGH,CRITICAL
        exit-code: 0
      continue-on-error: true
      
    - name: Custom Dockerfile analysis
      id: analysis
      env:
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        DOCKERIGNORE_EXISTS: ${{ steps.dockerignore_check.outputs.dockerignore_exists }}
      run: |
        # –û—Ç–∫–ª—é—á–∞–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –≤—ã—Ö–æ–¥ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ —à–∞–≥–∞
        set +e
        
        echo "## üìã Dockerfile Analysis Results" > analysis-results.md
        echo "" >> analysis-results.md
        echo "**Scan date:** $(date)" >> analysis-results.md
        echo "**Commit:** ${{ github.sha }}" >> analysis-results.md
        echo "**Branch:** ${{ github.ref }}" >> analysis-results.md
        echo "" >> analysis-results.md
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        ISSUE_COUNT=0
        CRITICAL_COUNT=0
        
        echo "### üîç Found Issues:" >> analysis-results.md
        
        # –ü–†–û–í–ï–†–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ò –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø NON-ROOT –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        echo "### üë§ Non-Root User Analysis:" >> analysis-results.md
        
        # –ü–æ–∏—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è—Ö
        USER_CREATION_PATTERNS=(
          "adduser"
          "useradd" 
          "addgroup"
          "groupadd"
          "chown.*:"
          "chmod.*[0-9]{3}.*/home"
        )
        
        USER_CREATED=false
        USER_CREATION_LINES=""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        while IFS= read -r line; do
          for pattern in "${USER_CREATION_PATTERNS[@]}"; do
            if echo "$line" | grep -E "$pattern" > /dev/null; then
              USER_CREATED=true
              USER_CREATION_LINES="$USER_CREATION_LINES- $line"$'\n'
              break
            fi
          done
        done < <(grep "^RUN " Dockerfile)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ USER
        USER_INSTRUCTIONS=$(grep "^USER " Dockerfile)
        LAST_USER_INSTRUCTION=$(echo "$USER_INSTRUCTIONS" | tail -1)
        HAS_EXPLICIT_NON_ROOT_USER=false
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º USER –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if [ -n "$USER_INSTRUCTIONS" ]; then
          while IFS= read -r user_line; do
            if [[ "$user_line" != "USER root" && "$user_line" != "USER 0" ]]; then
              HAS_EXPLICIT_NON_ROOT_USER=true
              NON_ROOT_USER="$user_line"
            fi
          done <<< "$USER_INSTRUCTIONS"
        fi
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑
        BASE_IMAGE=$(grep "^FROM " Dockerfile | tail -1 | awk '{print $2}')
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è non-root —Å—Ç–∞—Ç—É—Å–∞
        if [ "$HAS_EXPLICIT_NON_ROOT_USER" = true ]; then
          echo "‚úÖ **PASS**: –Ø–≤–Ω–æ —É–∫–∞–∑–∞–Ω non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $NON_ROOT_USER" >> analysis-results.md
        elif [ -n "$USER_CREATION_LINES" ]; then
          echo "‚ö†Ô∏è **WARNING**: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–µ—Ç—Å—è, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ USER –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:" >> analysis-results.md
          echo "$USER_CREATION_LINES" >> analysis-results.md
          echo "–î–æ–±–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é: USER <username>" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        elif [[ "$BASE_IMAGE" == *"nginx"* ]]; then
          echo "‚úÖ **PASS**: –û–±—Ä–∞–∑ nginx –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'nginx'" >> analysis-results.md
          echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å: USER nginx" >> analysis-results.md
        elif [[ "$BASE_IMAGE" == *"node"* ]]; then
          echo "‚úÖ **PASS**: –û–±—Ä–∞–∑ node –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'node'" >> analysis-results.md  
          echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å: USER node" >> analysis-results.md
        elif [[ "$BASE_IMAGE" == *"postgres"* ]]; then
          echo "‚úÖ **PASS**: –û–±—Ä–∞–∑ postgres –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'postgres'" >> analysis-results.md
          echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å: USER postgres" >> analysis-results.md
        else
          echo "‚ö†Ô∏è **WARNING**: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–µ non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" >> analysis-results.md
          echo "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:" >> analysis-results.md
          echo "- –°–æ–∑–¥–∞—Ç—å non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (adduser/useradd)" >> analysis-results.md
          echo "- –£–∫–∞–∑–∞—Ç—å USER –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –≤ –∫–æ–Ω—Ü–µ Dockerfile" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        echo "" >> analysis-results.md
        
        # –û–°–¢–ê–õ–¨–ù–´–ï –ü–†–û–í–ï–†–ö–ò
        echo "### üê≥ Dockerfile Best Practices:" >> analysis-results.md
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        RUN_COUNT=$(grep -c "^RUN " Dockerfile 2>/dev/null || echo "0")
        if [ "$RUN_COUNT" -gt 5 ]; then
          echo "‚ö†Ô∏è **WARNING**: –ú–Ω–æ–≥–æ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ($RUN_COUNT). –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–π—Ç–µ –∏—Ö –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ª–æ–µ–≤" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        else
          echo "‚úÖ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: $RUN_COUNT (–≤ –Ω–æ—Ä–º–µ)" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ADD –≤–º–µ—Å—Ç–æ COPY
        ADD_COUNT=$(grep -c "ADD" Dockerfile 2>/dev/null || echo "0")
        if [ "$ADD_COUNT" -gt 0 ]; then
          echo "‚ùå **WARNING**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ADD ($ADD_COUNT —Ä–∞–∑) –≤–º–µ—Å—Ç–æ COPY. COPY –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        else
          echo "‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è COPY –≤–º–µ—Å—Ç–æ ADD" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã –±–µ–∑ –≤–µ—Ä—Å–∏–π
        if grep -E "FROM.*:(latest| )" Dockerfile > /dev/null 2>&1 || 
           grep -E "^FROM [^:]+$" Dockerfile > /dev/null 2>&1; then
          echo "‚ö†Ô∏è **WARNING**: –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä—Å–∏—é —Ç–µ–≥–∞" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        else
          echo "‚úÖ –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–µ–π" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ curl | bash
        if grep -E "curl.*\|.*bash" Dockerfile > /dev/null 2>&1 || 
           grep -E "wget.*\|.*bash" Dockerfile > /dev/null 2>&1; then
          echo "üö® **CRITICAL**: –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω 'curl | bash'. –≠—Ç–æ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        else
          echo "‚úÖ –ù–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö curl | bash –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ 777
        if grep -E "chmod.*777" Dockerfile > /dev/null 2>&1 || 
           grep -E "777" Dockerfile > /dev/null 2>&1; then
          echo "üö® **CRITICAL**: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ 777 - —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        else
          echo "‚úÖ –ù–µ—Ç –æ–ø–∞—Å–Ω—ã—Ö –ø—Ä–∞–≤ 777" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–∫–µ—Ç–æ–≤ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        if grep -E "(apt-get|apk|yum|dnf) install" Dockerfile > /dev/null 2>&1 && 
           ! grep -E "(apt-get clean|rm -rf /var/cache/|apk cache clean|yum clean|dnf clean)" Dockerfile > /dev/null 2>&1; then
          echo "‚ö†Ô∏è **WARNING**: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        else
          echo "‚úÖ –ö–µ—à –ø–∞–∫–µ—Ç–æ–≤ –æ—á–∏—â–∞–µ—Ç—Å—è" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ .dockerignore
        if [ "$DOCKERIGNORE_EXISTS" = "false" ]; then
          echo "‚ö†Ô∏è **WARNING**: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .dockerignore —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        else
          echo "‚úÖ .dockerignore —Ñ–∞–π–ª –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç" >> analysis-results.md
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏
        if [ "$BUILD_SUCCESS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### üõ† Docker Build Results:" >> analysis-results.md
          echo "üö® **CRITICAL**: Docker image failed to build!" >> analysis-results.md
          if [ -f build-results.json ]; then
            if jq -e . build-results.json > /dev/null 2>&1; then
              BUILD_ERROR=$(jq -r '.error // "Build failed but error details are not available"' build-results.json 2>/dev/null)
              echo "Build errors:" >> analysis-results.md
              echo '```' >> analysis-results.md
              echo "$BUILD_ERROR" >> analysis-results.md
              echo '```' >> analysis-results.md
            else
              echo "‚Ä¢ Invalid build results JSON format" >> analysis-results.md
              if [ -f build-errors.log ]; then
                echo "Raw build errors:" >> analysis-results.md
                echo '```' >> analysis-results.md
                head -100 build-errors.log >> analysis-results.md
                echo '```' >> analysis-results.md
              fi
            fi
          fi
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        else
          echo "" >> analysis-results.md
          echo "### üõ† Docker Build Results:" >> analysis-results.md
          echo "‚úÖ Docker image built successfully" >> analysis-results.md
        fi
        
        # –ê–Ω–∞–ª–∏–∑ Hadolint —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        HADOLINT_COUNT=0
        if [ -f hadolint-results.json ]; then
          echo "" >> analysis-results.md
          echo "### üê≥ Hadolint Results:" >> analysis-results.md
          
          if jq -e . hadolint-results.json > /dev/null 2>&1; then
            HADOLINT_COUNT=$(jq '. | length' hadolint-results.json 2>/dev/null || echo "0")
            if [ "$HADOLINT_COUNT" -gt 0 ]; then
              jq -r '.[] | "‚Ä¢ **\(.level)**: \(.message) (–∫–æ–¥: \(.code))"' hadolint-results.json 2>/dev/null >> analysis-results.md
            else
              echo "‚úÖ No Hadolint issues found" >> analysis-results.md
            fi
          else
            echo "‚Ä¢ Invalid Hadolint JSON format" >> analysis-results.md
          fi
        fi
        
        # –ê–Ω–∞–ª–∏–∑ Trivy —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        TRIVY_COUNT=0
        if [ -f trivy-results.json ] && [ "$BUILD_SUCCESS" = "true" ] && [ "$DOCKERIGNORE_EXISTS" = "true" ]; then
          echo "" >> analysis-results.md
          echo "### üîç Trivy Vulnerability Scan:" >> analysis-results.md
          
          if jq -e . trivy-results.json > /dev/null 2>&1; then
            TRIVY_COUNT=$(jq '.Results[0].Vulnerabilities // [] | length' trivy-results.json 2>/dev/null || echo "0")
            if [ "$TRIVY_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è **SECURITY**: Found $TRIVY_COUNT vulnerabilities" >> analysis-results.md
              jq -r '.Results[0].Vulnerabilities[0:3][] | "‚Ä¢ \(.VulnerabilityID): \(.Title) (\(.Severity))"' trivy-results.json 2>/dev/null >> analysis-results.md
            else
              echo "‚úÖ No vulnerabilities found by Trivy" >> analysis-results.md
            fi
          else
            echo "‚Ä¢ Invalid Trivy JSON format" >> analysis-results.md
          fi
        elif [ "$BUILD_SUCCESS" = "true" ] && [ "$DOCKERIGNORE_EXISTS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### üîç Trivy Vulnerability Scan:" >> analysis-results.md
          echo "‚è≠Ô∏è **SKIPPED**: Trivy scan skipped - no .dockerignore file" >> analysis-results.md
        elif [ "$BUILD_SUCCESS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### üîç Trivy Vulnerability Scan:" >> analysis-results.md
          echo "‚è≠Ô∏è **SKIPPED**: Trivy scan skipped - Docker build failed" >> analysis-results.md
        fi
        
        # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã
        ISSUE_COUNT=$((ISSUE_COUNT + HADOLINT_COUNT + TRIVY_COUNT))
        
        echo "" >> analysis-results.md
        echo "---" >> analysis-results.md
        echo "**Summary:** Found $ISSUE_COUNT issues ($CRITICAL_COUNT critical)" >> analysis-results.md
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        exit 0
