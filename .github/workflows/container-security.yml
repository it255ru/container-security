name: Dockerfile Security Scan with SBOM

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  dockerfile-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: Dockerfile
        format: json
        output-file: hadolint-results.json
      continue-on-error: true
      
    - name: Try to build Docker image
      id: build
      continue-on-error: true
      run: |
        echo "üîÑ Attempting to build Docker image..."
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        mkdir -p html
        if [ ! -f "html/index.html" ]; then
          echo '<!DOCTYPE html><html><head><title>Test</title></head><body><h1>Test Page</h1></body></html>' > html/index.html
        fi
        
        # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑
        set +e
        docker build -t test-image . > build-output.log 2> build-errors.log
        BUILD_EXIT_CODE=$?
        set -e
        
        echo "=== BUILD OUTPUT ==="  
        cat build-output.log
        echo "=== BUILD ERRORS ==="
        cat build-errors.log
        
        # –í—Å–µ–≥–¥–∞ —Å–æ–∑–¥–∞–µ–º JSON —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–±–æ—Ä–∫–∏
        if [ $BUILD_EXIT_CODE -eq 0 ]; then
          echo "‚úÖ Docker build successful"
          echo "build_success=true" >> $GITHUB_OUTPUT
          echo '{"success": true, "message": "Build completed successfully"}' > build-results.json
        else
          echo "‚ùå Docker build failed"
          echo "build_success=false" >> $GITHUB_OUTPUT
          ERROR_MSG=$(head -c 1000 build-errors.log | sed 's/"/\\"/g' | tr -d '\n' || echo "Build failed")
          echo "{\"success\": false, \"error\": \"$ERROR_MSG\"}" > build-results.json
        fi
      
    - name: Check for .dockerignore
      id: dockerignore_check
      run: |
        if [ -f ".dockerignore" ]; then
          echo "‚úÖ .dockerignore file found"
          echo "dockerignore_exists=true" >> $GITHUB_OUTPUT
        else
          echo "‚ö†Ô∏è No .dockerignore file found"
          echo "dockerignore_exists=false" >> $GITHUB_OUTPUT
        fi

    # ========== –ù–û–í–´–ï –®–ê–ì–ò –î–õ–Ø SBOM-–ê–ù–ê–õ–ò–ó–ê ==========
    - name: Install SBOM tools
      if: steps.build.outputs.build_success == 'true'
      run: |
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Syft –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SBOM
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º jq –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
        sudo apt-get update && sudo apt-get install -y jq
        
      - name: Generate SBOM for final image
        id: sbom_generation
        if: steps.build.outputs.build_success == 'true'
        run: |
          echo "üìã Generating SBOM for final image..."
          
          # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SBOM —Å –ø–æ–º–æ—â—å—é Syft
          syft test-image -o cyclonedx-json > sbom.cyclonedx.json
          
          # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω–æ–º Nginx –≤ SBOM
          NGINX_HASH=$(docker run --rm test-image sha256sum /usr/sbin/nginx 2>/dev/null | cut -d' ' -f1 || echo "unknown")
          
          # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ jq - –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
          jq '.components += [{
            "type": "application",
            "name": "nginx",
            "version": "1.24.0",
            "purl": "pkg:generic/nginx@1.24.0?download_url=https://nginx.org/download/nginx-1.24.0.tar.gz",
            "hashes": [{"alg": "SHA-256", "content": "'$NGINX_HASH'"}],
            "properties": [
              {"name": "builtFromSource", "value": "true"},
              {"name": "configureOptions", "value": "--with-http_ssl_module"},
              {"name": "hardened", "value": "true"}
            ]
          }]' sbom.cyclonedx.json > sbom-enhanced.json
          
          mv sbom-enhanced.json sbom.cyclonedx.json
          
          # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ê–ù–ê–õ–ò–ó SBOM - –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ purl
          COMPONENT_COUNT=$(jq '.components | length' sbom.cyclonedx.json)
          
          # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø–æ–¥—Å—á–µ—Ç Alpine –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ purl –∏ –µ–≥–æ —Ç–∏–ø
          ALPINE_COMPONENTS=$(jq '[.components[] | select(.purl != null) | select(.purl | type == "string") | select(.purl | startswith("pkg:apk/alpine"))] | length' sbom.cyclonedx.json)
          
          echo "component_count=$COMPONENT_COUNT" >> $GITHUB_OUTPUT
          echo "alpine_components=$ALPINE_COMPONENTS" >> $GITHUB_OUTPUT
          
          echo "‚úÖ SBOM generated with $COMPONENT_COUNT components ($ALPINE_COMPONENTS Alpine packages)"
      
    - name: Scan SBOM for vulnerabilities
      id: sbom_scan
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "üîç Scanning SBOM for vulnerabilities..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Trivy –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SBOM
        trivy sbom --severity HIGH,CRITICAL --format json sbom.cyclonedx.json > sbom-scan-results.json 2>/dev/null || true
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SBOM
        if [ -f sbom-scan-results.json ] && jq -e . sbom-scan-results.json > /dev/null 2>&1; then
          SBOM_VULN_COUNT=$(jq '.Results[0].Vulnerabilities // [] | length' sbom-scan-results.json 2>/dev/null || echo "0")
          echo "sbom_vuln_count=$SBOM_VULN_COUNT" >> $GITHUB_OUTPUT
          echo "üìä SBOM scan found $SBOM_VULN_COUNT vulnerabilities"
        else
          echo "sbom_vuln_count=0" >> $GITHUB_OUTPUT
          echo "üìä SBOM scan completed - no vulnerabilities found or error in scan"
        fi
      
    - name: Scan SBOM for vulnerabilities
      id: sbom_scan
      if: steps.build.outputs.build_success == 'true'
      run: |
        echo "üîç Scanning SBOM for vulnerabilities..."
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º Trivy –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SBOM
        trivy sbom --severity HIGH,CRITICAL --format json sbom.cyclonedx.json > sbom-scan-results.json 2>/dev/null || true
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è SBOM
        if [ -f sbom-scan-results.json ] && jq -e . sbom-scan-results.json > /dev/null 2>&1; then
          SBOM_VULN_COUNT=$(jq '.Results[0].Vulnerabilities // [] | length' sbom-scan-results.json 2>/dev/null || echo "0")
          echo "sbom_vuln_count=$SBOM_VULN_COUNT" >> $GITHUB_OUTPUT
          echo "üìä SBOM scan found $SBOM_VULN_COUNT vulnerabilities"
        else
          echo "sbom_vuln_count=0" >> $GITHUB_OUTPUT
          echo "üìä SBOM scan completed - no vulnerabilities found or error in scan"
        fi
      
    - name: Run Trivy vulnerability scan
      id: trivy_scan
      if: steps.build.outputs.build_success == 'true' && steps.dockerignore_check.outputs.dockerignore_exists == 'true'
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: test-image
        format: json
        output: trivy-results.json
        severity: HIGH,CRITICAL
        exit-code: 0
      continue-on-error: true
      
    - name: Custom Dockerfile analysis
      id: analysis
      env:
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        DOCKERIGNORE_EXISTS: ${{ steps.dockerignore_check.outputs.dockerignore_exists }}
        SBOM_COMPONENT_COUNT: ${{ steps.sbom_generation.outputs.component_count }}
        SBOM_ALPINE_COMPONENTS: ${{ steps.sbom_generation.outputs.alpine_components }}
        SBOM_VULN_COUNT: ${{ steps.sbom_scan.outputs.sbom_vuln_count }}
      run: |
        set +e
        
        echo "## üìã Dockerfile Analysis Results" > analysis-results.md
        echo "" >> analysis-results.md
        echo "**Scan date:** $(date)" >> analysis-results.md
        echo "**Commit:** ${{ github.sha }}" >> analysis-results.md
        echo "**Branch:** ${{ github.ref }}" >> analysis-results.md
        echo "" >> analysis-results.md
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
        ISSUE_COUNT=0
        CRITICAL_COUNT=0
        
        echo "### üîç Found Issues:" >> analysis-results.md
        
        # –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê NON-ROOT –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø
        LAST_USER=$(grep "^USER " Dockerfile | tail -1 2>/dev/null || echo "")
        USER_CREATED=$(grep -E "adduser|useradd|addgroup|groupadd" Dockerfile 2>/dev/null | head -1 || echo "")

        if [[ -n "$LAST_USER" && "$LAST_USER" != "USER root" && "$LAST_USER" != "USER 0" ]]; then
          echo "‚úÖ Non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $LAST_USER" >> analysis-results.md
        elif [ -n "$USER_CREATED" ]; then
          echo "‚úÖ –°–æ–∑–¥–∞–Ω non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $USER_CREATED" >> analysis-results.md
        else
          echo "‚ö†Ô∏è **WARNING**: –ù–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω non-root –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # –î—Ä—É–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥)...
        if grep "ADD" Dockerfile > /dev/null 2>&1; then
          echo "‚ùå **WARNING**: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ADD –≤–º–µ—Å—Ç–æ COPY. COPY –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–µ–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–∞–∑–æ–≤—ã–µ –æ–±—Ä–∞–∑—ã –±–µ–∑ –≤–µ—Ä—Å–∏–π
        if grep -E "FROM.*:(latest| )" Dockerfile > /dev/null 2>&1 || 
           grep -E "^FROM [^:]+$" Dockerfile > /dev/null 2>&1; then
          echo "‚ö†Ô∏è **WARNING**: –ë–∞–∑–æ–≤—ã–π –æ–±—Ä–∞–∑ –±–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–µ—Ä—Å–∏–∏. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –≤–µ—Ä—Å–∏—é —Ç–µ–≥–∞" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ curl | bash
        if grep -E "curl.*\|.*bash" Dockerfile > /dev/null 2>&1 || 
           grep -E "wget.*\|.*bash" Dockerfile > /dev/null 2>&1; then
          echo "üö® **CRITICAL**: –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ–ø–∞—Å–Ω—ã–π –ø–∞—Ç—Ç–µ—Ä–Ω 'curl/wget | bash'. –≠—Ç–æ —É–≥—Ä–æ–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ 777
        if grep -E "chmod.*777" Dockerfile > /dev/null 2>&1 || 
           grep -E "777" Dockerfile > /dev/null 2>&1; then
          echo "üö® **CRITICAL**: –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ 777 - —ç—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–∞—è —É—è–∑–≤–∏–º–æ—Å—Ç—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏!" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É –ø–∞–∫–µ—Ç–æ–≤ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞
        if grep -E "(apt-get|apk|yum|dnf) install" Dockerfile > /dev/null 2>&1 && 
           ! grep -E "(apt-get clean|rm -rf /var/cache/|apk cache clean|yum clean|dnf clean)" Dockerfile > /dev/null 2>&1; then
          echo "‚ö†Ô∏è **WARNING**: –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤ –±–µ–∑ –æ—á–∏—Å—Ç–∫–∏ –∫–µ—à–∞. –£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –æ–±—Ä–∞–∑–∞" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        RUN_COUNT=$(grep -c "^RUN " Dockerfile 2>/dev/null || echo "0")
        if [ "$RUN_COUNT" -gt 5 ]; then
          echo "‚ö†Ô∏è **WARNING**: –ú–Ω–æ–≥–æ RUN –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π ($RUN_COUNT). –ö–æ–Ω—Å–æ–ª–∏–¥–∏—Ä—É–π—Ç–µ –∏—Ö –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Å–ª–æ–µ–≤" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ .dockerignore
        if [ "$DOCKERIGNORE_EXISTS" = "false" ]; then
          echo "‚ö†Ô∏è **WARNING**: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç .dockerignore —Ñ–∞–π–ª. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–æ–±–∞–≤–∏—Ç—å –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞" >> analysis-results.md
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
        fi
        
        # ========== –ù–û–í–´–ô –†–ê–ó–î–ï–õ: SBOM ANALYSIS ==========
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "" >> analysis-results.md
          echo "### üì¶ SBOM Analysis:" >> analysis-results.md
          echo "‚úÖ **Software Bill of Materials generated**" >> analysis-results.md
          echo "- **Total components:** $SBOM_COMPONENT_COUNT" >> analysis-results.md
          echo "- **Alpine packages:** $SBOM_ALPINE_COMPONENTS" >> analysis-results.md
          echo "- **Nginx:** 1.24.0 (compiled from source)" >> analysis-results.md
          
          if [ "$SBOM_VULN_COUNT" -gt 0 ]; then
            echo "‚ö†Ô∏è **SBOM Vulnerabilities:** $SBOM_VULN_COUNT high/critical issues found" >> analysis-results.md
            ISSUE_COUNT=$((ISSUE_COUNT + SBOM_VULN_COUNT))
          else
            echo "‚úÖ **SBOM Vulnerabilities:** No high/critical issues found" >> analysis-results.md
          fi
        fi
        
        # –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–±–æ—Ä–∫–∏ - –≤—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç—á–µ—Ç
        if [ "$BUILD_SUCCESS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### üõ† Docker Build Results:" >> analysis-results.md
          echo "üö® **CRITICAL**: Docker image failed to build!" >> analysis-results.md
          if [ -f build-results.json ]; then
            if jq -e . build-results.json > /dev/null 2>&1; then
              BUILD_ERROR=$(jq -r '.error // "Build failed but error details are not available"' build-results.json 2>/dev/null)
              echo "Build errors:" >> analysis-results.md
              echo '```' >> analysis-results.md
              echo "$BUILD_ERROR" >> analysis-results.md
              echo '```' >> analysis-results.md
            else
              echo "‚Ä¢ Invalid build results JSON format" >> analysis-results.md
              if [ -f build-errors.log ]; then
                echo "Raw build errors:" >> analysis-results.md
                echo '```' >> analysis-results.md
                head -100 build-errors.log >> analysis-results.md
                echo '```' >> analysis-results.md
              fi
            fi
          fi
          ISSUE_COUNT=$((ISSUE_COUNT + 1))
          CRITICAL_COUNT=$((CRITICAL_COUNT + 1))
        else
          echo "" >> analysis-results.md
          echo "### üõ† Docker Build Results:" >> analysis-results.md
          echo "‚úÖ Docker image built successfully" >> analysis-results.md
        fi
        
        # –ê–Ω–∞–ª–∏–∑ Hadolint —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        HADOLINT_COUNT=0
        if [ -f hadolint-results.json ]; then
          echo "" >> analysis-results.md
          echo "### üê≥ Hadolint Results:" >> analysis-results.md
          
          if jq -e . hadolint-results.json > /dev/null 2>&1; then
            HADOLINT_COUNT=$(jq '. | length' hadolint-results.json 2>/dev/null || echo "0")
            if [ "$HADOLINT_COUNT" -gt 0 ]; then
              jq -r '.[] | "‚Ä¢ **\(.level)**: \(.message) (–∫–æ–¥: \(.code))"' hadolint-results.json 2>/dev/null >> analysis-results.md
            else
              echo "‚úÖ No Hadolint issues found" >> analysis-results.md
            fi
          else
            echo "‚Ä¢ Invalid Hadolint JSON format" >> analysis-results.md
          fi
        fi
        
        # –ê–Ω–∞–ª–∏–∑ Trivy —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        TRIVY_COUNT=0
        if [ -f trivy-results.json ] && [ "$BUILD_SUCCESS" = "true" ] && [ "$DOCKERIGNORE_EXISTS" = "true" ]; then
          echo "" >> analysis-results.md
          echo "### üîç Trivy Vulnerability Scan:" >> analysis-results.md
          
          if jq -e . trivy-results.json > /dev/null 2>&1; then
            TRIVY_COUNT=$(jq '.Results[0].Vulnerabilities // [] | length' trivy-results.json 2>/dev/null || echo "0")
            if [ "$TRIVY_COUNT" -gt 0 ]; then
              echo "‚ö†Ô∏è **SECURITY**: Found $TRIVY_COUNT vulnerabilities" >> analysis-results.md
              jq -r '.Results[0].Vulnerabilities[0:3][] | "‚Ä¢ \(.VulnerabilityID): \(.Title) (\(.Severity))"' trivy-results.json 2>/dev/null >> analysis-results.md
            else
              echo "‚úÖ No vulnerabilities found by Trivy" >> analysis-results.md
            fi
          else
            echo "‚Ä¢ Invalid Trivy JSON format" >> analysis-results.md
          fi
        elif [ "$BUILD_SUCCESS" = "true" ] && [ "$DOCKERIGNORE_EXISTS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### üîç Trivy Vulnerability Scan:" >> analysis-results.md
          echo "‚è≠Ô∏è **SKIPPED**: Trivy scan skipped - no .dockerignore file" >> analysis-results.md
        elif [ "$BUILD_SUCCESS" = "false" ]; then
          echo "" >> analysis-results.md
          echo "### üîç Trivy Vulnerability Scan:" >> analysis-results.md
          echo "‚è≠Ô∏è **SKIPPED**: Trivy scan skipped - Docker build failed" >> analysis-results.md
        fi
        
        # –°—É–º–º–∏—Ä—É–µ–º –≤—Å–µ –ø—Ä–æ–±–ª–µ–º—ã (–≤–∫–ª—é—á–∞—è SBOM —É—è–∑–≤–∏–º–æ—Å—Ç–∏)
        ISSUE_COUNT=$((ISSUE_COUNT + HADOLINT_COUNT + TRIVY_COUNT))
        
        echo "" >> analysis-results.md
        echo "---" >> analysis-results.md
        echo "**Summary:** Found $ISSUE_COUNT issues ($CRITICAL_COUNT critical)" >> analysis-results.md
        if [ "$BUILD_SUCCESS" = "true" ]; then
          echo "**SBOM Components:** $SBOM_COMPONENT_COUNT total, $SBOM_ALPINE_COMPONENTS Alpine packages" >> analysis-results.md
        fi
        
        echo "issue_count=$ISSUE_COUNT" >> $GITHUB_OUTPUT
        echo "critical_count=$CRITICAL_COUNT" >> $GITHUB_OUTPUT
        
        exit 0
        
    - name: Upload SBOM artifact
      if: steps.build.outputs.build_success == 'true'
      uses: actions/upload-artifact@v4
      with:
        name: sbom-cyclonedx
        path: sbom.cyclonedx.json
        retention-days: 90
        
    - name: Create or Update Issue
      uses: actions/github-script@v6
      if: steps.analysis.outputs.issue_count > 0 || steps.build.outputs.build_success == 'false'
      env:
        ISSUE_COUNT: ${{ steps.analysis.outputs.issue_count }}
        CRITICAL_COUNT: ${{ steps.analysis.outputs.critical_count }}
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        SBOM_COMPONENT_COUNT: ${{ steps.sbom_generation.outputs.component_count }}
        SBOM_ALPINE_COMPONENTS: ${{ steps.sbom_generation.outputs.alpine_components }}
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('analysis-results.md', 'utf8');
          const issueCount = process.env.ISSUE_COUNT || 0;
          const criticalCount = process.env.CRITICAL_COUNT || 0;
          const buildSuccess = process.env.BUILD_SUCCESS;
          const sbomComponentCount = process.env.SBOM_COMPONENT_COUNT || 0;
          const sbomAlpineComponents = process.env.SBOM_ALPINE_COMPONENTS || 0;
          
          let title;
          if (buildSuccess === 'false') {
            title = `üö® Docker Build Failed: ${issueCount} additional problems found`;
          } else {
            title = `üö® Dockerfile Security Issues: ${issueCount} problems found (${criticalCount} critical)`;
          }
          
          // –ß–∏—Ç–∞–µ–º JSON —Ñ–∞–π–ª—ã —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
          let buildResultsJson = '';
          let hadolintResultsJson = '';
          let trivyResultsJson = '';
          let sbomJson = '';
          let sbomScanResultsJson = '';
          
          try {
            if (fs.existsSync('build-results.json')) {
              buildResultsJson = fs.readFileSync('build-results.json', 'utf8');
              buildResultsJson = JSON.stringify(JSON.parse(buildResultsJson), null, 2);
            }
          } catch (e) {
            buildResultsJson = 'Error parsing build results JSON: ' + e.message;
          }
          
          try {
            if (fs.existsSync('hadolint-results.json')) {
              hadolintResultsJson = fs.readFileSync('hadolint-results.json', 'utf8');
              hadolintResultsJson = JSON.stringify(JSON.parse(hadolintResultsJson), null, 2);
            }
          } catch (e) {
            hadolintResultsJson = 'Error parsing Hadolint results JSON: ' + e.message;
          }
          
          try {
            if (fs.existsSync('trivy-results.json')) {
              trivyResultsJson = fs.readFileSync('trivy-results.json', 'utf8');
              trivyResultsJson = JSON.stringify(JSON.parse(trivyResultsJson), null, 2);
            }
          } catch (e) {
            trivyResultsJson = 'Error parsing Trivy results JSON: ' + e.message;
          }
          
          try {
            if (fs.existsSync('sbom.cyclonedx.json')) {
              sbomJson = fs.readFileSync('sbom.cyclonedx.json', 'utf8');
              sbomJson = JSON.stringify(JSON.parse(sbomJson), null, 2);
            }
          } catch (e) {
            sbomJson = 'Error parsing SBOM JSON: ' + e.message;
          }
          
          try {
            if (fs.existsSync('sbom-scan-results.json')) {
              sbomScanResultsJson = fs.readFileSync('sbom-scan-results.json', 'utf8');
              sbomScanResultsJson = JSON.stringify(JSON.parse(sbomScanResultsJson), null, 2);
            }
          } catch (e) {
            sbomScanResultsJson = 'Error parsing SBOM scan results JSON: ' + e.message;
          }
          
          // –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç —Å JSON –¥–∞–Ω–Ω—ã–º–∏
          const detailedReport = `${report}
          
          ## üìä Full Scan Results (JSON)
          
          <details>
          <summary>üìã Docker Build Results (JSON)</summary>
          
          \`\`\`json
          ${buildResultsJson || 'No build results available'}
          \`\`\`
          </details>
          
          <details>
          <summary>üê≥ Hadolint Results (JSON)</summary>
          
          \`\`\`json
          ${hadolintResultsJson || 'No Hadolint results available'}
          \`\`\`
          </details>
          
          <details>
          <summary>üîç Trivy Vulnerability Scan Results (JSON)</summary>
          
          \`\`\`json
          ${trivyResultsJson || 'No Trivy results available'}
          \`\`\`
          </details>
          
          ${buildSuccess === 'true' ? `
          <details>
          <summary>üì¶ SBOM Analysis Results (JSON)</summary>
          
          **SBOM Components:** ${sbomComponentCount} total, ${sbomAlpineComponents} Alpine packages
          
          \`\`\`json
          ${sbomJson || 'No SBOM available'}
          \`\`\`
          </details>
          
          <details>
          <summary>üîç SBOM Vulnerability Scan Results (JSON)</summary>
          
          \`\`\`json
          ${sbomScanResultsJson || 'No SBOM scan results available'}
          \`\`\`
          </details>
          ` : ''}
          
          ---
          *–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω–æ workflow [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*
          `;
          
          // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π issue
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['dockerfile-security']
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Dockerfile Security Issues') || issue.title.includes('Docker Build Failed')
          );
          
          if (existingIssue) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π issue
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              title: title,
              body: detailedReport
            });
            console.log(`Updated existing issue #${existingIssue.number}`);
          } else {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π issue
            const { data: newIssue } = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: detailedReport,
              labels: ['dockerfile-security', 'security', 'ci-cd']
            });
            console.log(`Created new issue #${newIssue.number}`);
          }
          
    - name: Close existing issue if no problems
      uses: actions/github-script@v6
      if: steps.analysis.outputs.issue_count == 0 && steps.build.outputs.build_success == 'true'
      with:
        script: |
          const { data: issues } = await github.rest.issues.listForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            state: 'open',
            labels: ['dockerfile-security']
          });
          
          const existingIssue = issues.find(issue => 
            issue.title.includes('Dockerfile Security Issues') || issue.title.includes('Docker Build Failed')
          );
          
          if (existingIssue) {
            await github.rest.issues.update({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              state: 'closed'
            });
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: existingIssue.number,
              body: `‚úÖ –í—Å–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ Dockerfile –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–º–º–∏—Ç–µ ${context.sha}\nüì¶ SBOM –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª —á–∏—Å—Ç—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã`
            });
            
            console.log(`Closed issue #${existingIssue.number}`);
          }
          
    - name: Fail if critical issues found
      if: steps.analysis.outputs.critical_count > 0
      run: |
        echo "‚ùå –ù–∞–π–¥–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ Dockerfile: ${{ steps.analysis.outputs.critical_count }}"
        echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –º–µ—Ä–¥–∂–µ–º"
        echo "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–º Issue"
        exit 1
        
    - name: Post PR comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request' && (steps.analysis.outputs.issue_count > 0 || steps.build.outputs.build_success == 'false')
      env:
        ISSUE_COUNT: ${{ steps.analysis.outputs.issue_count }}
        CRITICAL_COUNT: ${{ steps.analysis.outputs.critical_count }}
        BUILD_SUCCESS: ${{ steps.build.outputs.build_success }}
        SBOM_COMPONENT_COUNT: ${{ steps.sbom_generation.outputs.component_count }}
        SBOM_ALPINE_COMPONENTS: ${{ steps.sbom_generation.outputs.alpine_components }}
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('analysis-results.md', 'utf8');
          const issueCount = process.env.ISSUE_COUNT;
          const criticalCount = process.env.CRITICAL_COUNT;
          const buildSuccess = process.env.BUILD_SUCCESS;
          const sbomComponentCount = process.env.SBOM_COMPONENT_COUNT;
          const sbomAlpineComponents = process.env.SBOM_ALPINE_COMPONENTS;
          
          let commentTitle;
          if (buildSuccess === 'false') {
            commentTitle = '## üîç Dockerfile Security Scan - BUILD FAILED';
          } else {
            commentTitle = '## üîç Dockerfile Security Scan';
          }
          
          const sbomInfo = buildSuccess === 'true' ? `
          **SBOM Analysis:**
          - üì¶ Components: ${sbomComponentCount} total
          - üêß Alpine packages: ${sbomAlpineComponents}
          - üåê Nginx: 1.24.0 (compiled from source)
          ` : '';
          
          const commentBody = `${commentTitle}
          
          ${report}
          
          ${sbomInfo}
          
          *–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏*`;
          
          await github.rest.issues.createComment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
            body: commentBody
          });
